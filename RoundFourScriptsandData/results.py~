import numpy as np
from matplotlib import pyplot as plt 

'''
Sample anaylsis will take in a given filename and return the sample corresponding to that file as an array, as well as the isolated left channel, right channel, lateral and vertical mix
Basically, I already ran functions to get the wave files turned into arrays. I want to use this script to analyze those samples.
Sample analysis loads those for me
The format of those is as follows:
each row corresponds to the data of a given recording.
The first column is the left channel, the second is the right, the third is the vertical mix, the fourth is the lateral mix
The number of trials is the number of recordings I took with identical initial conditions
Each Sample corresponds to a setting of the azimuthal angle
Each set of (trialnums) of rows corresponds to the same initial condition
I want to average each set of identical initial conditions
Thus, each set of Sample data is transformed into a set of Average data
The Average data is then examined to see how initial conditions determine the resulting recording.
The collection of all average data is used to see how both initial conditions and azimuthal angle characterize the recording.
Quantitatively, I expect as AZ angle varies, one channel becomes stronger than the other.
Furthermore, I expect the initial needle angle to also determine the channel strength in some periodic way.

Get Averages takes in the sample and the trialnum by
'''


filenames = ['avg5mm.txt', 'avg4mm.txt', 'avg3mm.txt', 'avg2mm.txt','avg1mm.txt', 'rms5mm.txt', 'rms4mm.txt', 'rms3mm.txt', 'rms2mm.txt','rms1mm.txt']


def SampleAnalysis(filename):
	Sample = np.loadtxt(filename, delimiter = ',')
	SampleLeftChannel = Sample[:,0]
	SampleRightChannel = Sample[:, 1]
	SampleLatMix = Sample[:, 2]
	SampleVertMix = Sample[:, 3]
	maxval = np.max(Sample)		
	numsamps, nummixes = np.shape(Sample)
	'''
	plt.subplot(4, 3, i+1)
	plt.plot(SampleLeftChannel, color = 'r')
	plt.plot(SampleVertMix, color = 'g')
	plt.plot(SampleLatMix, color = 'b')		
	plt.plot(SampleRightChannel, color = 'c')
	plt.title(filename[:-4] + " Values	")
	'''
	return Sample, SampleLeftChannel, SampleRightChannel, SampleLatMix, SampleVertMix


def GetAverages(sample, trialnum):
	#goal is to average the three vals corresponding to a single angular setting
	# returns Averages, an array whose rows are the averages corresponding to each initial condition and whose columns are the left, right, vert, and lat
	numsamps, nummixes = np.shape(sample)
	Averages = np.zeros(((numsamps // trialnum), nummixes)) 
	for i in range(numsamps // trialnum):
		temp = sample[i*trialnum:trialnum*(i+1) , :]
		Averages[(i, 0)] = np.sum(temp[:,0]) / trialnum
		Averages[(i, 1)] = np.sum(temp[:,1]) / trialnum
		Averages[(i, 2)] = np.sum(temp[:,2]) / trialnum
		Averages[(i, 3)] = np.sum(temp[:,3]) / trialnum
	return Averages	


def GetAllAverages(filenames, trialnum):
	#iterates GetAverages over all the different AZ angles (the different samples)
	avgfilenames = [0] * len(filenames)
	for i in range(len(filenames)):
		Sample, SampleLeftChannel, SampleRightChannel, SampleLatMix, SampleVertMix = SampleAnalysis(filenames[i])
		Averages = GetAverages(Sample, trialnum)
		domain = np.linspace(1, 4, 4)
		avgfilenames[i] = ('averages' + filenames[i])
		np.savetxt('averages' + filenames[i], Averages, delimiter = ',', newline = '\n')
	return avgfilenames

def AverageAzimuth(filenames, trialnum):
	#combines the averages over each AZ angle to see the bigger picture
	#does this for left, right, and vert
	avgfilenames = GetAllAverages(filenames, trialnum)
	print(avgfilenames)
	lenaverages = len(avgfilenames) // 2 #ignore rms vals for now
	leftaverages = np.zeros((lenaverages*4, 1))
	rightaverages = np.zeros((lenaverages*4, 1))
	vertaverages = np.zeros((lenaverages*4, 1))
	for i in range(lenaverages):
		index = 4*i 
		averages = np.loadtxt(avgfilenames[i], delimiter = ',')
		leftaverages[index:index+4, 0] = averages[:,0]
		rightaverages[index:index+4, 0] = averages[:,1]
		vertaverages[index:index+4, 0] = averages[:, 2]
	return leftaverages, rightaverages, vertaverages

leftaverages, rightaverages, vertaverages = AverageAzimuth(filenames, 3)
domain = range(1, 21)
seconddomain = np.arange(3, 23, 4)

vertaverageaverage = [0]*(len(vertaverages) // 4)
for i in range(5):
	vertaverageaverage[i] = np.sum(vertaverages[4*i:4*i + 4]) / 4

#plt.scatter(domain, leftaverages, color = 'r')
#plt.scatter(domain, rightaverages, color = 'b')
plt.title("Vertical Mix Avg. Value as function of Azimuthal Angle")
plt.xlabel("Initial Condition Setting Modulated By Micrometer setting from 5mm to 1mm")
plt.ylabel("Average Amplitude Value")
plt.plot(domain, vertaverages, color = 'g')
plt.plot(seconddomain, vertaverageaverage, color = 'c')
plt.show()
